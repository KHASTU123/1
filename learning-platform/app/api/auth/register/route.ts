import { type NextRequest, NextResponse } from "next/server"
import dbConnect from "@/lib/mongo"
import User from "@/lib/models/User"
import { hashPassword } from "@/lib/auth"

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ Register API called")

    const body = await request.json()
    console.log("üìù Request body received:", { ...body, password: "[HIDDEN]" })

    const { name, email, phone, password } = body

    // Validate required fields
    if (!name || !email || !phone || !password) {
      console.log("‚ùå Missing required fields")
      return NextResponse.json({ message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin" }, { status: 400 })
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      console.log("‚ùå Invalid email format:", email)
      return NextResponse.json({ message: "Email kh√¥ng h·ª£p l·ªá" }, { status: 400 })
    }

    // Validate password length
    if (password.length < 6) {
      console.log("‚ùå Password too short")
      return NextResponse.json({ message: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" }, { status: 400 })
    }

    // Connect to database
    console.log("üîå Connecting to database...")
    await dbConnect()
    console.log("‚úÖ Database connected successfully")

    // Check if user already exists
    console.log("üîç Checking if user exists with email:", email)
    const existingUser = await User.findOne({ email: email.toLowerCase() })
    if (existingUser) {
      console.log("‚ùå User already exists with email:", email)
      return NextResponse.json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" }, { status: 400 })
    }
    console.log("‚úÖ Email is available")

    // Hash password
    console.log("üîê Hashing password...")
    const hashedPassword = await hashPassword(password)
    console.log("‚úÖ Password hashed successfully")

    // Create user
    console.log("üë§ Creating new user...")
    const userData = {
      name: name.trim(),
      email: email.toLowerCase().trim(),
      phone: phone.trim(),
      password: hashedPassword,
    }

    const user = await User.create(userData)
    console.log("‚úÖ User created successfully with ID:", user._id)

    return NextResponse.json(
      {
        message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
        userId: user._id,
      },
      { status: 201 },
    )
  } catch (error: any) {
    console.error("üí• Registration error:", error)

    // Handle specific MongoDB errors
    if (error.code === 11000) {
      console.log("‚ùå Duplicate key error - email already exists")
      return NextResponse.json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" }, { status: 400 })
    }

    if (error.name === "ValidationError") {
      console.log("‚ùå Validation error:", error.message)
      const messages = Object.values(error.errors).map((err: any) => err.message)
      return NextResponse.json({ message: messages.join(", ") }, { status: 400 })
    }

    if (error.name === "MongoNetworkError" || error.name === "MongooseServerSelectionError") {
      console.log("‚ùå MongoDB connection error")
      return NextResponse.json({ message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu" }, { status: 500 })
    }

    return NextResponse.json(
      {
        message: "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.",
        error: process.env.NODE_ENV === "development" ? error.message : undefined,
      },
      { status: 500 },
    )
  }
}
